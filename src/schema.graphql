type User {
  username: String! @id
  displayName: String
  isAdmin: Boolean
  tickets: [Ticket] @hasInverse(field: assignedTo)
  authoredComments: [Comment] @hasInverse(field: author)
}

type Project
  @auth(
    query: {
      or: [
        { rule: "{$IS_ADMIN: { eq: \"true\" }}" }
        {
          rule: "query ($username: String!) { queryProject { admin(filter: {username: {eq: $username}}) { username } } }"
        }
        {
          rule: "query ($username: String!) { queryProject { roles { assignedTo(filter: {username: {eq: $username}}) { username } } } }"
        }
      ]
    }
  ) {
  projID: ID!
  name: String! @search(by: [term])
  url: String
  description: String
  admin: User
  roles: [Role]
  columns: [Column] @hasInverse(field: inProject)
  "A JSON array storing the order of the columns by id"
  order: String
}

type Role {
  id: ID!
  permission: [Permission!]! @search
  assignedTo: [User]
}

enum Permission {
  VIEW
  EDIT
  DELETE
}

type Column {
  colID: ID!
  inProject: Project!
  name: String!
  orderPreference: Int
    @deprecated(reason: "To order columns inside projects use Project.order")
  tickets: [Ticket] @hasInverse(field: onColumn)
  "A JSON array storing the order of the tickets by id"
  order: String
}

type Ticket {
  id: ID!
  onColumn: Column!
  title: String! @search(by: [term])
  description: String
  orderPreference: Int
    @deprecated(reason: "To order tickets inside columns use Column.order")
  assignedTo: [User!]
  comments: [Comment] @hasInverse(field: onTicket)
}

type Comment {
  id: ID!
  onTicket: Ticket
  author: User!
}

# Dgraph.Authorization {"VerificationKey":"AUTH0_PUBLIC_KEY","Header":"token","Namespace":"https://example.com/claims/graphqlkanban","Algo":"RS256","Audience":["REACT_APP_AUTH0_CLIENT_ID"]}
